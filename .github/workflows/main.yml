name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            cloud-resume-challenge/get-function/.venv
            cloud-resume-challenge/put-function/.venv
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies and Deploy get-function
        working-directory: cloud-resume-challenge/get-function
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests for get-function
        working-directory: cloud-resume-challenge/get-function
        run: python app.py  # Adjust based on your testing framework

      - name: Install Dependencies and Deploy put-function
        working-directory: cloud-resume-challenge/put-function
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run Tests for put-function
        working-directory: cloud-resume-challenge/put-function
        run: python app.py  # Adjust based on your testing framework


  build-and-deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - run: sam build
        working-directory: cloud-resume-challenge

      - name: Build and Push Docker Image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          IMAGE_REPO_NAME: cloud-resume-challenge
          IMAGE_TAG: latest
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          # Build Docker image
          docker build -t $ECR_REGISTRY/$IMAGE_REPO_NAME:$IMAGE_TAG .

          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

          # Push Docker image to ECR
          docker push $ECR_REGISTRY/$IMAGE_REPO_NAME:$IMAGE_TAG

      - run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset
        working-directory: cloud-resume-challenge


  integration-test-backend:
    needs: build-and-deploy-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: cd cloud-resume-challenge && make integration-test && cd ../../


  end-to-end-test:
    needs: integration-test-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - run: cd cloud-resume-challenge/end-to-end-test && npm install && node index.js
  
  deploy-site:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: jakejarvis/s3-sync-action@master
      with:
        args: --delete
      env:
        AWS_S3_BUCKET: my-resume-website-jiin-v1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SOURCE_DIR: cloud-resume-challenge/resume-site
        


  # # create something for ec2 deployment
  # ec2-deploy:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       image-id: ami-0c55b159cbfafe1f0
  #       instance-type: t2.micro
  #       key-name: my-key-pair
  #       security-group-ids: sg-0b5e6c79cf4cb5a4a
  #       subnet-id: subnet-0ecac448
  #       region: us-east-1
  #       tags: Name=MyInstance
  #       wait-time: 300
  #       retries: 10
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
  #       ssh-public-key: ${{ secrets.SSH_PUBLIC_KEY }}
  #       ssh-port: 22
  #       ssh-username: ec2-user
  #       ssh-wait-time: 300
  #       ssh-retries: 10
  #       ssh-remote-port: 22
  #       ssh-remote-user: ec2-user
  #       ssh-remote-host: ${{ secrets.SSH_REMOTE_HOST }}
  #       ssh-remote-command: "echo 'Hello, world!'"